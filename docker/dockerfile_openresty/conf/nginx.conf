
user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    server {
        listen       8888;
        server_name  localhost;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
        root   html;
        }

        set $img_thumbnail_root /home/dfs/thumb; #set thumb path
        set $img_file $img_thumbnail_root$uri;   #thumb file

        # like：/pic/M00/xx/xx/xx.jpg_100-.jpg or /pic/M00/xx/xx/xx.jpg_-100.jpg
        location ~* ^(\/(\w+)(\/M00)(.+\.(jpg|jpeg|gif|png)))_((\d+\-)|(\-\d+))\.(jpg|jpeg|gif|png)$ {
            root $img_thumbnail_root;    # root path for croped img
            set $fdfs_group_root /home/dfs/storage; #set fastdfs group path $2

            if (!-f $img_file) {    # if thumb file not exists

                set $request_filepath $fdfs_group_root$4;    # origin_img full path：/document_root/1.gif
                set $img_size $6;    # img width or height size depends on uri : img size like "-100" or "100-", "-" means auto size
                set $img_ext $5;    # file ext
                content_by_lua_file /usr/local/openresty/nginx/conf/lua/autoSize.lua;    # load auto width or height crop Lua file
            }
        }

        # like：/pic/M00/xx/xx/xx.jpg_200x100.jpg
        location ~* ^(\/(\w+)(\/M00)(.+\.(jpg|jpeg|gif|png))_(\d+)+x(\d+)+\.(jpg|jpeg|gif|png))$ {
            root $img_thumbnail_root;    # root path for croped img
            set $fdfs_group_root /home/dfs/storage; #set fastdfs group path $2
            if (!-f $img_file) {   # if thumb file not exists
                set $request_filepath $fdfs_group_root$4;    # real file path
                set $img_width $6;    #  img width
                set $img_height $7;    #  img height
                set $img_ext $5;     # file ext
                content_by_lua_file /usr/local/openresty/nginx/conf/lua/cropSize.lua;    # load crop Lua file
            }
        }

        location ~/group[0-9]/ {
            # add support for img which has query params,
            # like:  xxx.jpg?a=b&c=d_750x750.jpg
            if ($args ~* "^([^_]+)_(\d+)+x(\d+)+\.(jpg|jpeg|gif|png)$"){
                set $w $2;
                set $h $3;
                set $img_ext $4;

                # rewrite ^\?(.*)$  _${w}x${h}.$img_ext?   last;
                rewrite ([^.]*).(jpg|jpeg|png|gif)$  $1.$2_${w}x${h}.$img_ext? permanent;
            }

            alias /home/dfs/storage;
            ngx_fastdfs_module;
        }



    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
